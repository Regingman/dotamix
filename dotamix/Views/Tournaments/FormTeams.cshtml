@model dotamix.Models.Tournament

@{
    ViewData["Title"] = "Формирование команд";
}

<h1>Формирование команд для турнира "@Model.Name"</h1>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<div class="teams-container">
    <div class="teams-section">
        <div class="section-header">
            <h3>Команды</h3>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTeamModal">
                Создать команду
            </button>
        </div>
        <div class="teams-grid">
            @foreach (var team in Model.Teams)
            {
                <div class="team-card" data-team-id="@team.Id">
                    <div class="team-header">
                        <h5>@team.Name</h5>
                        <div class="team-captain">
                            Капитан: @team.Captain.Name (@team.Captain.Nickname)
                        </div>
                    </div>
                    <div class="team-players" data-team-id="@team.Id">
                        @foreach (var player in team.Players)
                        {
                            <div class="player-card" draggable="true"
                                 data-player-id="@player.Id"
                                 data-player-name="@player.User.Name"
                                 data-player-nickname="@player.User.Nickname"
                                 data-player-mmr="@player.MMR"
                                 data-player-positions="@player.Positions">
                                <div class="player-info">
                                    <div class="player-header">
                                        <span class="player-name">@player.User.Name</span>
                                        <span class="player-nickname">(@player.User.Nickname)</span>
                                    </div>
                                    <div class="player-stats">
                                        <span class="mmr">MMR: @player.MMR</span>
                                        <div class="positions">
                                            @foreach (var position in player.GetPositions())
                                            {
                                                <span class="position-badge pos-@position">@position</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="team-stats">
                        <span>Средний MMR: @(team.Players.Any() ? team.Players.Average(p => p.MMR).ToString() : "0")</span>
                        <span>Игроков: @team.Players.Count/5</span>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="available-players-section">
        <div class="section-header">
            <h3>Доступные игроки</h3>
            <div class="filter-controls">
                <input type="text" id="playerSearch" class="form-control" placeholder="Поиск игрока...">
                <select id="positionFilter" class="form-control">
                    <option value="">Все позиции</option>
                    <option value="1">1 (Керри)</option>
                    <option value="2">2 (Мид)</option>
                    <option value="3">3 (Оффлейн)</option>
                    <option value="4">4 (Поддержка)</option>
                    <option value="5">5 (Хард саппорт)</option>
                </select>
                <select id="mmrSort" class="form-control">
                    <option value="">MMR (по умолчанию)</option>
                    <option value="asc">MMR (по возрастанию)</option>
                    <option value="desc">MMR (по убыванию)</option>
                </select>
            </div>
        </div>
        <div id="availablePlayers" class="players-pool">
            @foreach (var player in ViewBag.AvailablePlayers)
            {
                <div class="player-card" draggable="true" 
                     data-player-id="@player.Id"
                     data-player-name="@player.User.Name"
                     data-player-nickname="@player.User.Nickname"
                     data-player-mmr="@player.MMR"
                     data-player-positions="@player.Positions">
                    <div class="player-info">
                        <div class="player-header">
                            <span class="player-name">@player.User.Name</span>
                            <span class="player-nickname">(@player.User.Nickname)</span>
                        </div>
                        <div class="player-stats">
                            <span class="mmr">MMR: @player.MMR</span>
                            <div class="positions">
                                @foreach (var position in player.GetPositions())
                                {
                                    <span class="position-badge pos-@position">@position</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Модальное окно создания команды -->
<div class="modal fade" id="createTeamModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Создание новой команды</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="CreateTeam" method="post">
                <div class="modal-body">
                    <input type="hidden" name="tournamentId" value="@Model.Id" />
                    <div class="mb-3">
                        <label for="teamName" class="form-label">Название команды</label>
                        <input type="text" class="form-control" id="teamName" name="teamName" required />
                    </div>
                    <div class="mb-3">
                        <label for="captainId" class="form-label">Капитан</label>
                        <select class="form-control" id="captainId" name="captainId" required>
                            <option value="">Выберите капитана</option>
                            @foreach (var captain in ViewBag.AvailableCaptains)
                            {
                                <option value="@captain.Id">@captain.User.Name (@captain.User.Nickname) - MMR: @captain.MMR</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary">Создать команду</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="mt-3">
    <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-secondary">Назад к деталям турнира</a>
</div>

<style>
.teams-container {
    display: flex;
    gap: 20px;
    margin: 20px 0;
    height: calc(100vh - 200px);
}

.teams-section {
    flex-grow: 1;
    overflow: hidden;
    background: #f0f2f5;
    border-radius: 10px;
    padding: 20px;
}

.available-players-section {
    width: 280px;
    flex-shrink: 0;
    display: flex;
    flex-direction: column;
    background: #fff;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.section-header {
    background: #fff;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.section-header h3 {
    margin: 0;
    font-size: 1.2rem;
    color: #333;
}

.filter-controls {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin-top: 10px;
}

.players-pool {
    flex-grow: 1;
    overflow-y: auto;
    padding: 10px;
    background: #fff;
    border-radius: 8px;
}

.teams-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 15px;
    overflow-y: auto;
    height: calc(100% - 60px);
    padding: 10px;
}

.team-card {
    background: #fff;
    border-radius: 8px;
    padding: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.team-header {
    border-bottom: 1px solid #eee;
    padding-bottom: 8px;
    margin-bottom: 8px;
}

.team-header h5 {
    margin: 0;
    color: #333;
}

.team-captain {
    font-size: 0.85rem;
    color: #666;
}

.team-players {
    min-height: 80px;
    padding: 8px;
    background: #f8f9fa;
    border-radius: 6px;
    margin: 8px 0;
}

.player-card {
    background: white;
    border-radius: 6px;
    padding: 6px;
    margin-bottom: 6px;
    cursor: move;
    font-size: 0.85rem;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05);
}

.player-card:last-child {
    margin-bottom: 0;
}

.player-info {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.player-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.player-name {
    font-weight: 500;
}

.player-nickname {
    color: #666;
}

.player-stats {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
}

.positions {
    display: flex;
    gap: 4px;
    flex-wrap: wrap;
}

.position-badge {
    display: inline-block;
    width: 20px;
    height: 20px;
    line-height: 20px;
    text-align: center;
    border-radius: 50%;
    color: white;
    font-weight: bold;
    font-size: 0.75rem;
}

.pos-1 { background-color: #ff4d4d; }
.pos-2 { background-color: #4d79ff; }
.pos-3 { background-color: #4dff4d; }
.pos-4 { background-color: #ff4dff; }
.pos-5 { background-color: #ffff4d; }

.team-stats {
    display: flex;
    justify-content: space-between;
    padding-top: 8px;
    margin-top: 8px;
    border-top: 1px solid #eee;
    font-size: 0.8rem;
    color: #666;
}

.player-card.dragging {
    opacity: 0.5;
}

.team-players.drag-over {
    background: #e9ecef;
}
</style>

<style media="screen and (max-width: 1200px)">
.teams-grid {
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
}
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const tournamentId = @Model.Id;
            
            // Поиск и фильтрация игроков
            const playerSearch = document.getElementById('playerSearch');
            const positionFilter = document.getElementById('positionFilter');
            const mmrSort = document.getElementById('mmrSort');
            const availablePlayers = document.getElementById('availablePlayers');

            function filterPlayers() {
                const searchText = playerSearch.value.toLowerCase();
                const position = positionFilter.value;
                const sort = mmrSort.value;

                const players = Array.from(availablePlayers.getElementsByClassName('player-card'));
                
                players.forEach(player => {
                    const name = player.dataset.playerName.toLowerCase();
                    const nickname = player.dataset.playerNickname.toLowerCase();
                    const positions = player.dataset.playerPositions.split(',');
                    
                    const matchesSearch = name.includes(searchText) || nickname.includes(searchText);
                    const matchesPosition = !position || positions.includes(position);
                    
                    player.style.display = matchesSearch && matchesPosition ? '' : 'none';
                });

                if (sort) {
                    const sortedPlayers = players.sort((a, b) => {
                        const mmrA = parseInt(a.dataset.playerMmr);
                        const mmrB = parseInt(b.dataset.playerMmr);
                        return sort === 'asc' ? mmrA - mmrB : mmrB - mmrA;
                    });

                    sortedPlayers.forEach(player => {
                        if (player.parentNode === availablePlayers) {
                            availablePlayers.appendChild(player);
                        }
                    });
                }
            }

            playerSearch.addEventListener('input', filterPlayers);
            positionFilter.addEventListener('change', filterPlayers);
            mmrSort.addEventListener('change', filterPlayers);

            // Инициализация drag and drop
            function initializeDragAndDrop() {
                const playerCards = document.querySelectorAll('.player-card:not([data-drag-initialized])');
                const teamDropZones = document.querySelectorAll('.team-players');

                playerCards.forEach(card => {
                    card.setAttribute('data-drag-initialized', 'true');
                    card.addEventListener('dragstart', handleDragStart);
                    card.addEventListener('dragend', handleDragEnd);
                });

                teamDropZones.forEach(zone => {
                    if (!zone.hasAttribute('data-drop-initialized')) {
                        zone.setAttribute('data-drop-initialized', 'true');
                        zone.addEventListener('dragover', handleDragOver);
                        zone.addEventListener('dragleave', handleDragLeave);
                        zone.addEventListener('drop', handleDrop);
                    }
                });
            }

            // Первичная инициализация
            initializeDragAndDrop();

            function handleDragStart(e) {
                e.target.classList.add('dragging');
                e.dataTransfer.setData('text/plain', JSON.stringify({
                    playerId: e.target.dataset.playerId,
                    playerName: e.target.dataset.playerName,
                    playerNickname: e.target.dataset.playerNickname,
                    playerMmr: e.target.dataset.playerMmr,
                    playerPositions: e.target.dataset.playerPositions
                }));
            }

            function handleDragEnd(e) {
                e.target.classList.remove('dragging');
            }

            function handleDragOver(e) {
                e.preventDefault();
                e.currentTarget.classList.add('drag-over');
            }

            function handleDragLeave(e) {
                e.currentTarget.classList.remove('drag-over');
            }

            function createPlayerCard(playerData) {
                const positions = playerData.playerPositions.split(',').map(pos => 
                    `<span class="position-badge pos-${pos}">${pos}</span>`
                ).join('');

                return `
                    <div class="player-card" draggable="true"
                         data-player-id="${playerData.playerId}"
                         data-player-name="${playerData.playerName}"
                         data-player-nickname="${playerData.playerNickname}"
                         data-player-mmr="${playerData.playerMmr}"
                         data-player-positions="${playerData.playerPositions}">
                        <div class="player-info">
                            <div class="player-header">
                                <span class="player-name">${playerData.playerName}</span>
                                <span class="player-nickname">(${playerData.playerNickname})</span>
                            </div>
                            <div class="player-stats">
                                <span class="mmr">MMR: ${playerData.playerMmr}</span>
                                <div class="positions">${positions}</div>
                            </div>
                        </div>
                    </div>
                `;
            }

            function handleDrop(e) {
                e.preventDefault();
                const teamId = e.currentTarget.dataset.teamId;
                const playerData = JSON.parse(e.dataTransfer.getData('text/plain'));

                fetch('/Tournaments/AddPlayerToTeam', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        teamId: teamId,
                        userId: playerData.playerId,
                        tournamentId: tournamentId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const playerCard = document.querySelector(`[data-player-id="${playerData.playerId}"]`);
                        if (playerCard) {
                            // Удаляем карточку из списка доступных игроков
                            playerCard.remove();
                            
                            // Добавляем карточку в команду
                            const teamPlayers = document.querySelector(`.team-players[data-team-id="${teamId}"]`);
                            if (teamPlayers) {
                                teamPlayers.insertAdjacentHTML('beforeend', createPlayerCard(playerData));
                                initializeDragAndDrop(); // Реинициализируем drag&drop для новой карточки
                            }
                            
                            // Обновляем статистику команды
                            updateTeamStats(teamId);
                        }
                    } else {
                        alert(data.message || 'Произошла ошибка при добавлении игрока');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Произошла ошибка при добавлении игрока');
                });

                e.currentTarget.classList.remove('drag-over');
            }

            function updateTeamStats(teamId) {
                const teamCard = document.querySelector(`.team-card[data-team-id="${teamId}"]`);
                if (!teamCard) return;

                const players = teamCard.querySelectorAll('.player-card');
                const statsElement = teamCard.querySelector('.team-stats');
                if (!statsElement) return;

                const averageMMR = players.length ? Math.round(Array.from(players).reduce((sum, player) => 
                    sum + parseInt(player.dataset.playerMmr), 0) / players.length) : 0;

                statsElement.innerHTML = `
                    <span>Средний MMR: ${averageMMR}</span>
                    <span>Игроков: ${players.length}/5</span>
                `;
            }
        });
    </script>
} 