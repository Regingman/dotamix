@model dotamix.Models.Tournament

@{
    ViewData["Title"] = "Формирование команд";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h2>Формирование команд - @Model.Name</h2>
        </div>
         <a asp-action="RandomizeTeams" asp-route-id="@Model.Id" class="btn btn-primary btn-primary">Рандом</a>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card border-dark">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">Команды</h5>
                </div>
                <div class="card-body">
                    <div class="row" id="teams-container">
                        @foreach (var team in Model.Teams.OrderBy(t => t.Order))
                        {
                            <div class="col-md-3 mb-4" data-team-id="@team.Id">
                                <div class="card border-dark h-100">
                                    <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="mb-0">@team.Name</h6>
                                            <small class="text-light">Средний MMR: @(team.Players.Any() ? team.Players.Average(p => p.MMR).ToString("F0") : "0")</small>
                                        </div>
                                        <div class="btn-group">
                                            <button class="btn btn-sm btn-outline-light" onclick="editTeam(@team.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" onclick="deleteTeam(@team.Id)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body p-2">
                                        <div class="players-container" data-team-id="@team.Id">
                                            @foreach (var player in team.Players)
                                            {
                                                <div class="player-item mb-2 p-2 border rounded" data-player-id="@player.Id" data-player-positions="@player.Positions">
                                                    <div class="d-flex justify-content-between align-items-start">
                                                        <div>
                                                            <div class="d-flex align-items-center gap-2">
                                                                <strong>@player.User.Nickname</strong>
                                                                <button type="button" class="btn btn-link text-danger p-0 delete-btn" onclick="removePlayer(@team.Id, @player.Id)">
                                                                    <i class="fas fa-times"></i>
                                                                </button>
                                                            </div>
                                                            <small class="text-muted d-block">@player.MMR MMR</small>
                                                            <div class="positions mt-1">
                                                                @foreach (var position in player.GetPositions())
                                                                {
                                                                    <span class="position-badge pos-@position">@position</span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card border-dark">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">Свободные игроки</h5>
                </div>
                <div class="card-body">
                    <div class="filter-controls mb-3">
                        <div class="input-group mb-2">
                            <input type="text" id="playerSearch" class="form-control" placeholder="Поиск игрока...">
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <select id="positionFilter" class="form-select">
                                    <option value="">Все позиции</option>
                                    <option value="1">1 (Керри)</option>
                                    <option value="2">2 (Мид)</option>
                                    <option value="3">3 (Оффлейн)</option>
                                    <option value="4">4 (Поддержка)</option>
                                    <option value="5">5 (Хард саппорт)</option>
                                </select>
                            </div>
                            <div class="col-6">
                                <select id="mmrSort" class="form-select">
                                    <option value="">MMR (по умолчанию)</option>
                                    <option value="asc">MMR (по возрастанию)</option>
                                    <option value="desc">MMR (по убыванию)</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="players-container" id="free-players">
                        @foreach (var player in Model.Participants.Where(p => p.TeamId == null))
                        {
                            <div class="player-item mb-2 p-2 border rounded" data-player-id="@player.Id" data-player-positions="@player.Positions">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <div class="d-flex align-items-center gap-2">
                                            <strong>@player.User.Nickname</strong>
                                        </div>
                                        <small class="text-muted d-block">@player.MMR MMR</small>
                                        <div class="positions mt-1">
                                            @foreach (var position in player.GetPositions())
                                            {
                                                <span class="position-badge pos-@position">@position</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Инициализация Sortable для команд
            new Sortable(document.getElementById('teams-container'), {
                animation: 150,
                onEnd: function(evt) {
                    const teamId = parseInt(evt.item.getAttribute('data-team-id'));
                    const newIndex = evt.newIndex;
                    
                    // Получаем все команды в новом порядке
                    const teams = Array.from(document.querySelectorAll('#teams-container > div'));
                    const teamOrder = teams.map(team => parseInt(team.getAttribute('data-team-id')));
                    
                    // Отправляем запрос на обновление порядка
                    $.post('/Tournaments/UpdateTeamOrder', { 
                        teamId: teamId,
                        newIndex: newIndex,
                        teamOrder: JSON.stringify(teamOrder),
                        tournamentId: @Model.Id 
                    })
                    .done(function(response) {
                        if (!response.success) {
                            alert(response.message || 'Произошла ошибка при изменении порядка команд');
                            location.reload();
                        }
                    })
                    .fail(function() {
                        alert('Произошла ошибка при изменении порядка команд');
                        location.reload();
                    });
                }
            });

            // Инициализация Sortable для каждой команды
            document.querySelectorAll('.players-container').forEach(container => {
                new Sortable(container, {
                    animation: 150,
                    group: {
                        name: 'players',
                        pull: true,
                        put: true
                    },
                    onAdd: function(evt) {
                        const playerId = parseInt(evt.item.getAttribute('data-player-id'));
                        const teamId = parseInt(evt.to.getAttribute('data-team-id'));
                        
                        if (!playerId || !teamId) {
                            console.error('Invalid player or team ID');
                            return;
                        }
                        
                        // Отправляем запрос на сервер
                        $.post('/Tournaments/AddPlayerToTeam', { playerId, teamId, tournamentId: @Model.Id })
                            .done(function(response) {
                                if (response && response.success) {
                                    // Создаем новую карточку с кнопкой удаления
                                    const newCard = evt.item.cloneNode(true);
                                    const deleteBtn = document.createElement('button');
                                    deleteBtn.type = 'button';
                                    deleteBtn.className = 'btn btn-link text-danger p-0 delete-btn';
                                    deleteBtn.innerHTML = '<i class="fas fa-times"></i>';
                                    deleteBtn.onclick = function() {
                                        removePlayer(teamId, playerId);
                                    };
                                    
                                    const nicknameContainer = newCard.querySelector('.d-flex.align-items-center.gap-2');
                                    if (nicknameContainer) {
                                        nicknameContainer.appendChild(deleteBtn);
                                    }
                                    
                                    // Удаляем старую карточку и добавляем новую
                                    evt.item.remove();
                                    container.appendChild(newCard);
                                } else {
                                    const errorMessage = response && response.message ? response.message : 'Произошла ошибка при добавлении игрока';
                                    alert(errorMessage);
                                    location.reload();
                                }
                            })
                            .fail(function(jqXHR, textStatus, errorThrown) {
                                console.error('Error:', textStatus, errorThrown);
                                alert('Произошла ошибка при добавлении игрока');
                                location.reload();
                            });
                    }
                });
            });

            //// Удаляем старый обработчик drag-and-drop
            //document.querySelectorAll('.players-container').forEach(container => {
            //    container.removeEventListener('dragover', function(e) {
            //        e.preventDefault();
            //    });

            //    container.removeEventListener('drop', function(e) {
            //        e.preventDefault();
            //        const playerId = e.dataTransfer.getData('text/plain');
            //        const teamId = this.dataset.teamId;
            //        if (playerId && teamId) {
            //            addPlayerToTeam(playerId, teamId);
            //        }
            //    });
            //});

            document.querySelectorAll('.player-item').forEach(item => {
                item.removeEventListener('dragstart', function(e) {
                    e.dataTransfer.setData('text/plain', this.dataset.playerId);
                });
            });

            // Инициализация фильтров
            const playerSearch = document.getElementById('playerSearch');
            const positionFilter = document.getElementById('positionFilter');
            const mmrSort = document.getElementById('mmrSort');
            const freePlayers = document.getElementById('free-players');

            function filterPlayers() {
                const searchText = playerSearch.value.toLowerCase();
                const position = positionFilter.value;
                const sort = mmrSort.value;

                const players = Array.from(freePlayers.getElementsByClassName('player-item'));

                players.forEach(player => {
                    const nickname = player.querySelector('strong').textContent.toLowerCase();
                    const positions = player.dataset.playerPositions.split(',');

                    const matchesSearch = nickname.includes(searchText);
                    const matchesPosition = !position || positions.includes(position);

                    player.style.display = matchesSearch && matchesPosition ? '' : 'none';
                });

                if (sort) {
                    const sortedPlayers = players.sort((a, b) => {
                        const mmrA = parseInt(a.querySelector('small').textContent);
                        const mmrB = parseInt(b.querySelector('small').textContent);
                        return sort === 'asc' ? mmrA - mmrB : mmrB - mmrA;
                    });

                    sortedPlayers.forEach(player => {
                        if (player.parentNode === freePlayers) {
                            freePlayers.appendChild(player);
                        }
                    });
                }
            }

            playerSearch.addEventListener('input', filterPlayers);
            positionFilter.addEventListener('change', filterPlayers);
            mmrSort.addEventListener('change', filterPlayers);
        });

        function addPlayerToTeam(playerId, teamId) {
            $.post('/Tournaments/AddPlayerToTeam', { playerId, teamId, tournamentId: @Model.Id })
                .done(function(response) {
                    if (!response.success) {
                        alert(response.message);
                        location.reload();
                    }
                })
                .fail(function() {
                    alert('Произошла ошибка при добавлении игрока');
                    location.reload();
                });
        }

        function removePlayer(teamId, playerId) {
            if (confirm('Вы уверены, что хотите удалить игрока из команды?')) {
                $.post('/Tournaments/RemovePlayerFromTeam', { teamId, playerId, tournamentId: @Model.Id })
                    .done(function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert(response.message);
                        }
                    })
                    .fail(function() {
                        alert('Произошла ошибка при удалении игрока');
                    });
            }
        }

        function deleteTeam(teamId) {
            if (confirm('Вы уверены, что хотите удалить команду? Все игроки будут освобождены.')) {
                $.post('/Tournaments/DeleteTeam', { teamId, tournamentId: @Model.Id })
                    .done(function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert(response.message);
                        }
                    })
                    .fail(function() {
                        alert('Произошла ошибка при удалении команды');
                    });
            }
        }

        function editTeam(teamId) {
            // TODO: Реализовать редактирование команды
            alert('Функция редактирования команды будет доступна в следующем обновлении');
        }
    </script>

    <style>
        .card {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .player-item {
            background-color: #f8f9fa;
            transition: all 0.2s ease;
            position: relative;
            width: 100%;
            max-width: 100%;
            cursor: move;
            transform: scale(0.9);
            transform-origin: top left;
        }

        .player-item.dragging {
            opacity: 0.5;
            background-color: #e9ecef;
            transform: scale(0.7);
        }

        .player-item:hover {
            background-color: #e9ecef;
        }

        .btn-link {
            text-decoration: none;
        }

        .btn-link:hover {
            text-decoration: none;
            opacity: 0.8;
        }

        .players-container {
            min-height: 50px;
            padding: 0.5rem;
            background-color: rgba(0,0,0,0.02);
            border-radius: 4px;
        }

        .sortable-ghost {
            opacity: 0.5;
            background-color: #e9ecef;
            transform: scale(0.7);
        }

        .sortable-drag {
            opacity: 0.8;
            background-color: #f8f9fa;
            transform: scale(0.7);
        }

        .positions {
            display: flex;
            gap: 4px;
            flex-wrap: wrap;
        }

        .position-badge {
            display: inline-block;
            width: 20px;
            height: 20px;
            line-height: 20px;
            text-align: center;
            border-radius: 50%;
            color: white;
            font-weight: bold;
            font-size: 0.75rem;
        }

        .pos-1 { background-color: #ff7676; }
        .pos-2 { background-color: #76a9ff; }
        .pos-3 { background-color: #76ff76; }
        .pos-4 { background-color: #ff76ff; }
        .pos-5 { background-color: #ffff76; }

        .filter-controls {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
        }

        .gap-2 {
            gap: 0.5rem;
        }

        .delete-btn {
            text-decoration: none;
            font-size: 1.1rem;
            line-height: 1;
            padding: 0 4px;
            opacity: 0.7;
            transition: opacity 0.2s ease;
        }

        .delete-btn:hover {
            opacity: 1;
        }

        .player-item:hover .delete-btn {
            opacity: 1;
        }
    </style>
}